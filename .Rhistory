Q_est_ss=cross_validate(cv_ksmooth_nested,folds,y,knnfit,bw_cv,type="ss")$data
Q_est_nested=cross_validate(cv_ksmooth_nested,folds,y,knnfit,bw_cv,type="nested")$data
#oracle knows Q0
Q_0=Q_est_full
Q_0$predy=Q0(w[Q_0$index])
Q_0$bw=NA
#############
#for each Q_estimate generate and evaluate se predictions
#   Q_est=Q_0
#   Q_est_source="Q0"
se_est_perf=function(Q_est,Q_est_full,Q_est_source){
#get squared error estimates
val_preds=get_val_preds(Q_est)
se_est=se(val_preds,y)
full_preds=get_val_preds(Q_est_full)
se_full=se(full_preds,y)
#generate knnfits for squared error (both training and testing)
se_knnfit=knnfit
se_knnfit$trainy=se_est
test_se_knnfit=test_knnfit
test_se_knnfit$trainy=se_est
test_se_full_knnfit=test_knnfit
test_se_full_knnfit$trainy=se_full
#get cv selected and oracle selected bw
bw_se_cv=optim_bw(cv_se_bw_risk,folds=folds,Q_bw_est=Q_est,knnfit=knnfit)
bw_se_oracle=optim_bw(test_bw_risk,testy=test_se_Q0,test_knnfit=test_se_knnfit)
#se bw selected on validation preds (method 2)
bw_se_cv_validation=optim_bw(cv_bw_risk,folds=folds,y=se_est,knnfit=se_knnfit)
#get test set predictions
test_se_bw_cv=ksmooth(test_se_knnfit,bw_se_cv)
test_se_bw_cv_validation=ksmooth(test_se_knnfit,bw_se_cv_validation)
test_se_bw_oracle=ksmooth(test_se_knnfit,bw_se_oracle)
#full se preds but bw selected as above (method 3)
test_se_full_bw_cv=ksmooth(test_se_full_knnfit,bw_se_cv)
#get MSES
mse_se_bw_cv=mse(test_se_bw_cv,test_se_Q0)
mse_se_bw_cv_validation=mse(test_se_bw_cv_validation,test_se_Q0)
mse_se_full_bw_cv=mse(test_se_full_bw_cv,test_se_Q0)
mse_se_bw_oracle=mse(test_se_bw_oracle,test_se_Q0)
data.frame(Q_est_source=Q_est_source, bw_source=c("cv","cv_validation","full_cv","oracle"),
bw=c(bw_se_cv, bw_se_cv_validation, bw_se_cv, bw_se_oracle),
mse=c(mse_se_bw_cv, mse_se_bw_cv_validation, mse_se_full_bw_cv, mse_se_bw_oracle))
}
perf_Q_0=se_est_perf(Q_0,Q_est_full,"Q_0")
perf_Q_ss=se_est_perf(Q_est_ss,Q_est_full,"SplitSequential")
perf_Q_nested=se_est_perf(Q_est_nested,Q_est_full,"Nested")
perf_Q_full=se_est_perf(Q_est_full,Q_est_full,"FullSequential")
results=rbind(perf_Q_0,perf_Q_ss,perf_Q_nested,perf_Q_full)
results$min_risk=test_min_risk
results$rd=results$mse-results$min_risk
ggplot(results,aes(y=Q_est_source,x=rd,color=bw_source))+geom_point()
cat(sprintf("iteration : %d\n",iteration))
data=gendata(n)
w=data$W
y=data$Y
knnfit=get_knnfit(w,w,y,length(w))
folds=make_folds(data)
testn=10000
testdata=gendata(testn)
testw=testdata$W
testy=testdata$Y
test_knnfit=get_knnfit(w,testw,y,length(w))
test_V0=V_Q0(testw)
test_se_Q0=se(testy,Q0(testw))
test_min_risk=mse(test_V0,test_se_Q0)
######
# now for Q0 estimated from data
#select bandwidth for Q(W)=E(Y|W)
bw_0=optim_bw(test_bw_risk,y,testy,test_knnfit)
bw_cv=optim_bw(cv_bw_risk,folds=folds,y=y,knnfit=knnfit)
#generate Q(W) predictions based on three nesting schemes
Q_est_full=cross_validate(cv_ksmooth_nested,folds,y,knnfit,bw_cv,type="full")$data
Q_est_ss=cross_validate(cv_ksmooth_nested,folds,y,knnfit,bw_cv,type="ss")$data
Q_est_nested=cross_validate(cv_ksmooth_nested,folds,y,knnfit,bw_cv,type="nested")$data
#oracle knows Q0
Q_0=Q_est_full
Q_0$predy=Q0(w[Q_0$index])
Q_0$bw=NA
#############
#for each Q_estimate generate and evaluate se predictions
#   Q_est=Q_0
#   Q_est_source="Q0"
se_est_perf=function(Q_est,Q_est_full,Q_est_source){
#get squared error estimates
val_preds=get_val_preds(Q_est)
se_est=se(val_preds,y)
full_preds=get_val_preds(Q_est_full)
se_full=se(full_preds,y)
#generate knnfits for squared error (both training and testing)
se_knnfit=knnfit
se_knnfit$trainy=se_est
test_se_knnfit=test_knnfit
test_se_knnfit$trainy=se_est
test_se_full_knnfit=test_knnfit
test_se_full_knnfit$trainy=se_full
#get cv selected and oracle selected bw
bw_se_cv=optim_bw(cv_se_bw_risk,folds=folds,Q_bw_est=Q_est,knnfit=knnfit)
bw_se_oracle=optim_bw(test_bw_risk,testy=test_se_Q0,test_knnfit=test_se_knnfit)
#se bw selected on validation preds (method 2)
bw_se_cv_validation=optim_bw(cv_bw_risk,folds=folds,y=se_est,knnfit=se_knnfit)
#get test set predictions
test_se_bw_cv=ksmooth(test_se_knnfit,bw_se_cv)
test_se_bw_cv_validation=ksmooth(test_se_knnfit,bw_se_cv_validation)
test_se_bw_oracle=ksmooth(test_se_knnfit,bw_se_oracle)
#full se preds but bw selected as above (method 3)
test_se_full_bw_cv=ksmooth(test_se_full_knnfit,bw_se_cv)
#get MSES
mse_se_bw_cv=mse(test_se_bw_cv,test_se_Q0)
mse_se_bw_cv_validation=mse(test_se_bw_cv_validation,test_se_Q0)
mse_se_full_bw_cv=mse(test_se_full_bw_cv,test_se_Q0)
mse_se_bw_oracle=mse(test_se_bw_oracle,test_se_Q0)
data.frame(Q_est_source=Q_est_source, bw_source=c("cv","cv_validation","full_cv","oracle"),
bw=c(bw_se_cv, bw_se_cv_validation, bw_se_cv, bw_se_oracle),
mse=c(mse_se_bw_cv, mse_se_bw_cv_validation, mse_se_full_bw_cv, mse_se_bw_oracle))
}
perf_Q_0=se_est_perf(Q_0,Q_est_full,"Q_0")
perf_Q_ss=se_est_perf(Q_est_ss,Q_est_full,"SplitSequential")
perf_Q_nested=se_est_perf(Q_est_nested,Q_est_full,"Nested")
perf_Q_full=se_est_perf(Q_est_full,Q_est_full,"FullSequential")
results=rbind(perf_Q_0,perf_Q_ss,perf_Q_nested,perf_Q_full)
results$min_risk=test_min_risk
results$rd=results$mse-results$min_risk
ggplot(results,aes(y=Q_est_source,x=rd,color=bw_source))+geom_point()
Sys.info()
sessionInfo()
setwd("~/Dropbox/thesis/simulations/sl_nesting_sim/")
library(data.table)
library(ggplot2)
files=dir("basic_nesting_results_1000/",full.names = T)
allresults=lapply(files,function(file){load(file);results})
results=rbindlist(allresults)
# results=results[iteration>1000,]
num_iter=length(unique(results$iteration))
results
avgresults=results[,list(mean=mean(mse),sd=sd(mse)),by=list(Q_est_sorce,bw_source)]
avgresults=results[,list(mean=mean(mse),sd=sd(mse)),by=list(Q_est_source,bw_source)]
results[,as.list(quantile(rd)),by=list(method)]
results[,as.list(quantile(rd)),by=list(Q_est_source,bw_source)]
avgresults=avgresults[order(mean)]
avgresults[,lower:=mean-1.96*sd/sqrt(num_iter)]
avgresults[,upper:=mean+1.96*sd/sqrt(num_iter)]
avgresults[,method:=factor(method,levels=avgresults$method)]
ggplot(avgresults,aes(y=method,x=mean,xmin=lower,xmax=upper,color=bw_source))+
geom_point()+geom_errorbarh()+
theme_bw()+xlab("MSE")+ylab("Nesting Method")
ggplot(avgresults,aes(y=Q_est_source,x=mean,xmin=lower,xmax=upper,color=bw_source))+
geom_point()+geom_errorbarh()+
theme_bw()+xlab("MSE")+ylab("Nesting Method")
ggplot(avgresults,aes(y=factor(Q_est_source):factor(bw_source),x=mean,xmin=lower,xmax=upper,color=bw_source))+
geom_point()+geom_errorbarh()+
theme_bw()+xlab("MSE")+ylab("Nesting Method")
avgresults=results[,list(mean=mean(rd),sd=sd(rd)),by=list(Q_est_source,bw_source)]
results[,as.list(quantile(rd)),by=list(Q_est_source,bw_source)]
avgresults=avgresults[order(mean)]
avgresults[,lower:=mean-1.96*sd/sqrt(num_iter)]
avgresults[,upper:=mean+1.96*sd/sqrt(num_iter)]
ggplot(avgresults,aes(y=factor(Q_est_source):factor(bw_source),x=mean,xmin=lower,xmax=upper,color=bw_source))+
geom_point()+geom_errorbarh()+
theme_bw()+xlab("MSE")+ylab("Nesting Method")
num_iter
ggplot(avgresults,aes(y=factor(bw_source),x=mean,xmin=lower,xmax=upper))+
geom_point()+geom_errorbarh()+facet_wrap(~Q_est_source)
theme_bw()+xlab("MSE")+ylab("Nesting Method")
ggplot(avgresults,aes(y=factor(bw_source),x=mean,xmin=lower,xmax=upper))+
geom_point()+geom_errorbarh()+facet_wrap(~Q_est_source)+
theme_bw()+xlab("MSE")+ylab("Nesting Method")
dput(unique(avgresults$Q_est_source))
Q_est_sources=c("Q_0", "SplitSequential",
"Nested", "FullSequential")
nice_Q_est=c("True E[Y|W]","Split Sequential","Nested","Full Sequential")
avgresults$Q_est_source=factor(avgresults$Q_est_source,levels=Q_est_sources,labels=nice_Q_est)
ggplot(avgresults,aes(y=factor(bw_source),x=mean,xmin=lower,xmax=upper))+
geom_point()+geom_errorbarh()+facet_wrap(~Q_est_source)+
theme_bw()+xlab("MSE")+ylab("Nesting Method")
bw_source=dput(unique(avgresults$bw_source))
bw_source=c("cv", "cv_validation",
"full_cv", "oracle")
nice_bw=c("CV Bandwidth\nValidation Set Predictions","drop","CV Bandwidth\nRefit to Full Data","Oracle Bandwidth\nValidation Set Predictions")
bw_sources=c("cv", "cv_validation",
"full_cv", "oracle")
avgresults$bw_source=factor(avgresults$bw_source,levels=bw_sources,labels=nice_bw)
avgresults=avgresults[bw_source!="drop"]
ggplot(avgresults,aes(y=factor(bw_source),x=mean,xmin=lower,xmax=upper))+
geom_point()+geom_errorbarh()+facet_wrap(~Q_est_source)+
theme_bw()+xlab("MSE")+ylab("Method")
dev.off()
ggplot(avgresults,aes(y=factor(bw_source),x=mean,xmin=lower,xmax=upper))+
geom_point()+geom_errorbarh()+facet_wrap(~Q_est_source)+
theme_bw()+xlab("MSE")+ylab("Method")
setwd("~/Dropbox/thesis/simulations/sl_nesting_sim/")
library(data.table)
library(ggplot2)
files=dir("basic_nesting_results_1000/",full.names = T)
allresults=lapply(files,function(file){load(file);results})
results=rbindlist(allresults)
# results=results[iteration>1000,]
num_iter=length(unique(results$iteration))
results
avgresults=results[,list(mean=mean(rd),sd=sd(rd)),by=list(Q_est_source,bw_source)]
results[,as.list(quantile(rd)),by=list(Q_est_source,bw_source)]
avgresults=avgresults[order(mean)]
avgresults[,lower:=mean-1.96*sd/sqrt(num_iter)]
avgresults[,upper:=mean+1.96*sd/sqrt(num_iter)]
# avgresults[,method:=factor(method,levels=avgresults$method)]
Q_est_sources=c("Q_0", "SplitSequential",
"Nested", "FullSequential")
nice_Q_est=c("True E[Y|W]","Split Sequential","Nested","Full Sequential")
avgresults$Q_est_source=factor(avgresults$Q_est_source,levels=Q_est_sources,labels=nice_Q_est)
bw_sources=c("cv", "cv_validation",
"full_cv", "oracle")
nice_bw=c("CV Bandwidth\nValidation Set Predictions","drop","CV Bandwidth\nRefit to Full Data","Oracle Bandwidth\nValidation Set Predictions")
avgresults$bw_source=factor(avgresults$bw_source,levels=bw_sources,labels=nice_bw)
avgresults=avgresults[bw_source!="drop"]
ggplot(avgresults,aes(y=factor(bw_source),x=mean,xmin=lower,xmax=upper))+
geom_point()+geom_errorbarh()+facet_wrap(~Q_est_source)+
theme_bw()+xlab("MSE")+ylab("Method")
ggplot(avgresults,aes(y=factor(bw_source),x=mean,xmin=lower,xmax=upper))+
geom_point()+geom_errorbarh()+facet_wrap(~Q_est_source,ncol=1)+
theme_bw()+xlab("MSE")+ylab("Method")
pdf("sl_mse_1000.pdf",height=10,width=5)
ggplot(avgresults,aes(y=factor(bw_source),x=mean,xmin=lower,xmax=upper))+
geom_point()+geom_errorbarh()+facet_wrap(~Q_est_source,ncol=1)+
theme_bw()+xlab("MSE")+ylab("Method")
dev.off()
pdf("sl_mse_1000.pdf",height=8,width=6)
ggplot(avgresults,aes(y=factor(bw_source),x=mean,xmin=lower,xmax=upper))+
geom_point()+geom_errorbarh()+facet_wrap(~Q_est_source,ncol=1)+
theme_bw()+xlab("Risk Difference")+ylab("Method")
dev.off()
setwd("~/Dropbox/thesis/simulations/sl_nesting_sim/")
library(data.table)
library(ggplot2)
files=dir("basic_nesting_results_1000/",full.names = T)
allresults=lapply(files,function(file){load(file);results})
results=rbindlist(allresults)
# results=results[iteration>1000,]
num_iter=length(unique(results$iteration))
results
avgresults=results[,list(mean=mean(rd),sd=sd(rd)),by=list(Q_est_source,bw_source)]
results[,as.list(quantile(rd)),by=list(Q_est_source,bw_source)]
avgresults=avgresults[order(mean)]
avgresults[,lower:=mean-1.96*sd/sqrt(num_iter)]
avgresults[,upper:=mean+1.96*sd/sqrt(num_iter)]
# avgresults[,method:=factor(method,levels=avgresults$method)]
Q_est_sources=c("Q_0", "SplitSequential",
"Nested", "FullSequential")
nice_Q_est=c("True E[Y|W]","Split Sequential","Nested","Full Sequential")
avgresults$Q_est_source=factor(avgresults$Q_est_source,levels=Q_est_sources,labels=nice_Q_est)
bw_sources=c("cv", "cv_validation",
"full_cv", "oracle")
nice_bw=c("CV Bandwidth\nValidation Set Predictions","drop","CV Bandwidth\nRefit to Full Data","Oracle Bandwidth\nValidation Set Predictions")
avgresults$bw_source=factor(avgresults$bw_source,levels=bw_sources,labels=nice_bw)
avgresults=avgresults[bw_source!="drop"]
pdf("sl_mse_1000.pdf",height=8,width=6)
ggplot(avgresults,aes(y=factor(bw_source),x=mean,xmin=lower,xmax=upper))+
geom_point()+geom_errorbarh()+facet_wrap(~Q_est_source,ncol=1)+
theme_bw()+xlab("Risk Difference")+ylab("Method")
dev.off()
num_iter
setwd("~/Dropbox/thesis/simulations/sl_nesting_sim/")
library(data.table)
library(ggplot2)
files=dir("basic_nesting_results_1000/",full.names = T)
allresults=lapply(files,function(file){load(file);results})
results=rbindlist(allresults)
# results=results[iteration>1000,]
num_iter=length(unique(results$iteration))
results
avgresults=results[,list(mean=mean(rd),sd=sd(rd)),by=list(Q_est_source,bw_source)]
results[,as.list(quantile(rd)),by=list(Q_est_source,bw_source)]
avgresults=avgresults[order(mean)]
avgresults[,lower:=mean-1.96*sd/sqrt(num_iter)]
avgresults[,upper:=mean+1.96*sd/sqrt(num_iter)]
# avgresults[,method:=factor(method,levels=avgresults$method)]
Q_est_sources=c("Q_0", "SplitSequential",
"Nested", "FullSequential")
nice_Q_est=c("True E[Y|W]","Split Sequential","Nested","Full Sequential")
avgresults$Q_est_source=factor(avgresults$Q_est_source,levels=Q_est_sources,labels=nice_Q_est)
bw_sources=c("cv", "cv_validation",
"full_cv", "oracle")
nice_bw=c("CV Bandwidth\nValidation Set Predictions","drop","CV Bandwidth\nRefit to Full Data","Oracle Bandwidth\nValidation Set Predictions")
avgresults$bw_source=factor(avgresults$bw_source,levels=bw_sources,labels=nice_bw)
avgresults=avgresults[bw_source!="drop"]
pdf("sl_mse_1000.pdf",height=8,width=6)
ggplot(avgresults,aes(y=factor(bw_source),x=mean,xmin=lower,xmax=upper))+
geom_point()+geom_errorbarh()+facet_wrap(~Q_est_source,ncol=1)+
theme_bw()+xlab("Risk Difference")+ylab("Method")
dev.off()
ggplot(avgresults,aes(y=factor(bw_source),x=mean,xmin=lower,xmax=upper))+
geom_point()+geom_errorbarh()+facet_wrap(~Q_est_source,ncol=1)+
theme_bw()+xlab("Risk Difference")+ylab("Method")
num_iter
setwd("~/Dropbox/thesis/simulations/sl_nesting_sim/")
library(data.table)
library(ggplot2)
files=dir("basic_nesting_results_250/",full.names = T)
allresults=lapply(files,function(file){load(file);results})
results=rbindlist(allresults)
# results=results[iteration>1000,]
num_iter=length(unique(results$iteration))
results
avgresults=results[,list(mean=mean(rd),sd=sd(rd)),by=list(Q_est_source,bw_source)]
results[,as.list(quantile(rd)),by=list(Q_est_source,bw_source)]
avgresults=avgresults[order(mean)]
avgresults[,lower:=mean-1.96*sd/sqrt(num_iter)]
avgresults[,upper:=mean+1.96*sd/sqrt(num_iter)]
# avgresults[,method:=factor(method,levels=avgresults$method)]
Q_est_sources=c("Q_0", "SplitSequential",
"Nested", "FullSequential")
nice_Q_est=c("True E[Y|W]","Split Sequential","Nested","Full Sequential")
avgresults$Q_est_source=factor(avgresults$Q_est_source,levels=Q_est_sources,labels=nice_Q_est)
bw_sources=c("cv", "cv_validation",
"full_cv", "oracle")
nice_bw=c("CV Bandwidth\nValidation Set Predictions","drop","CV Bandwidth\nRefit to Full Data","Oracle Bandwidth\nValidation Set Predictions")
avgresults$bw_source=factor(avgresults$bw_source,levels=bw_sources,labels=nice_bw)
avgresults=avgresults[bw_source!="drop"]
pdf("sl_mse_250.pdf",height=8,width=6)
ggplot(avgresults,aes(y=factor(bw_source),x=mean,xmin=lower,xmax=upper))+
geom_point()+geom_errorbarh()+facet_wrap(~Q_est_source,ncol=1)+
theme_bw()+xlab("Risk Difference")+ylab("Method")
dev.off()
ggplot(avgresults,aes(y=factor(bw_source),x=mean,xmin=lower,xmax=upper))+
geom_point()+geom_errorbarh()+facet_wrap(~Q_est_source,ncol=1)+
theme_bw()+xlab("Risk Difference")+ylab("Method")
setwd("~/Dropbox/thesis/simulations/sl_nesting_sim/")
library(data.table)
library(ggplot2)
files=dir("basic_nesting_results_250/",full.names = T)
allresults=lapply(files,function(file){load(file);results})
results=rbindlist(allresults)
# results=results[iteration>1000,]
num_iter=length(unique(results$iteration))
results
avgresults=results[,list(mean=mean(rd),sd=sd(rd)),by=list(Q_est_source,bw_source)]
results[,as.list(quantile(rd)),by=list(Q_est_source,bw_source)]
avgresults=avgresults[order(mean)]
avgresults[,lower:=mean-1.96*sd/sqrt(num_iter)]
avgresults[,upper:=mean+1.96*sd/sqrt(num_iter)]
# avgresults[,method:=factor(method,levels=avgresults$method)]
Q_est_sources=c("Q_0", "SplitSequential",
"Nested", "FullSequential")
nice_Q_est=c("True E[Y|W]","Split Sequential","Nested","Full Sequential")
avgresults$Q_est_source=factor(avgresults$Q_est_source,levels=Q_est_sources,labels=nice_Q_est)
bw_sources=c("cv", "cv_validation",
"full_cv", "oracle")
nice_bw=c("CV Bandwidth\nValidation Set Predictions","drop","CV Bandwidth\nRefit to Full Data","Oracle Bandwidth\nValidation Set Predictions")
avgresults$bw_source=factor(avgresults$bw_source,levels=bw_sources,labels=nice_bw)
avgresults=avgresults[bw_source!="drop"]
pdf("sl_mse_250.pdf",height=8,width=6)
ggplot(avgresults,aes(y=factor(bw_source),x=mean,xmin=lower,xmax=upper))+
geom_point()+geom_errorbarh()+facet_wrap(~Q_est_source,ncol=1)+
theme_bw()+xlab("Risk Difference")+ylab("Method")
dev.off()
ggplot(avgresults,aes(y=factor(bw_source),x=mean,xmin=lower,xmax=upper))+
geom_point()+geom_errorbarh()+facet_wrap(~Q_est_source,ncol=1)+
theme_bw()+xlab("Risk Difference")+ylab("Method")
setwd("~/Dropbox/thesis/simulations/sl_nesting_sim/")
library(data.table)
library(ggplot2)
files=dir("basic_nesting_results_1000/",full.names = T)
allresults=lapply(files,function(file){load(file);results})
results=rbindlist(allresults)
# results=results[iteration>1000,]
num_iter=length(unique(results$iteration))
results
avgresults=results[,list(mean=mean(rd),sd=sd(rd)),by=list(Q_est_source,bw_source)]
results[,as.list(quantile(rd)),by=list(Q_est_source,bw_source)]
avgresults=avgresults[order(mean)]
avgresults[,lower:=mean-1.96*sd/sqrt(num_iter)]
avgresults[,upper:=mean+1.96*sd/sqrt(num_iter)]
# avgresults[,method:=factor(method,levels=avgresults$method)]
Q_est_sources=c("Q_0", "SplitSequential",
"Nested", "FullSequential")
nice_Q_est=c("True E[Y|W]","Split Sequential","Nested","Full Sequential")
avgresults$Q_est_source=factor(avgresults$Q_est_source,levels=Q_est_sources,labels=nice_Q_est)
bw_sources=c("cv", "cv_validation",
"full_cv", "oracle")
nice_bw=c("CV Bandwidth\nValidation Set Predictions","drop","CV Bandwidth\nRefit to Full Data","Oracle Bandwidth\nValidation Set Predictions")
avgresults$bw_source=factor(avgresults$bw_source,levels=bw_sources,labels=nice_bw)
avgresults=avgresults[bw_source!="drop"]
ggplot(avgresults,aes(y=factor(bw_source),x=mean,xmin=lower,xmax=upper))+
geom_point()+geom_errorbarh()+facet_wrap(~Q_est_source,ncol=1)+
theme_bw()+xlab("Risk Difference")+ylab("Method")
avgresults=results[,list(mean=mean(rd),sd=sd(rd)),by=list(Q_est_source,bw_source)]
results[,as.list(quantile(rd)),by=list(Q_est_source,bw_source)]
avgresults=avgresults[order(mean)]
avgresults[,lower:=mean-1.96*sd/sqrt(num_iter)]
avgresults[,upper:=mean+1.96*sd/sqrt(num_iter)]
# avgresults[,method:=factor(method,levels=avgresults$method)]
Q_est_sources=c("Q_0", "SplitSequential",
"Nested", "FullSequential")
nice_Q_est=c("True E[Y|W]","Split Sequential","Nested","Full Sequential")
avgresults$Q_est_source=factor(avgresults$Q_est_source,levels=Q_est_sources,labels=nice_Q_est)
bw_sources=c("cv", "cv_validation",
"full_cv", "oracle")
nice_bw=c("CV Bandwidth\nValidation Set Predictions","drop","CV Bandwidth\nRefit to Full Data","Oracle Bandwidth\nValidation Set Predictions")
avgresults$bw_source=factor(avgresults$bw_source,levels=bw_sources,labels=nice_bw)
# avgresults=avgresults[bw_source!="drop"]
ggplot(avgresults,aes(y=factor(bw_source),x=mean,xmin=lower,xmax=upper))+
geom_point()+geom_errorbarh()+facet_wrap(~Q_est_source,ncol=1)+
theme_bw()+xlab("Risk Difference")+ylab("Method")
nice_bw=c("CV Bandwidth\nValidation Set Predictions","CV Bandwidth (Validation Sets)\nValidation Set Predictions","CV Bandwidth\nRefit to Full Data","Oracle Bandwidth\nValidation Set Predictions")
avgresults$bw_source=factor(avgresults$bw_source,levels=bw_sources,labels=nice_bw)
ggplot(avgresults,aes(y=factor(bw_source),x=mean,xmin=lower,xmax=upper))+
geom_point()+geom_errorbarh()+facet_wrap(~Q_est_source,ncol=1)+
theme_bw()+xlab("Risk Difference")+ylab("Method")
avgresults=results[,list(mean=mean(rd),sd=sd(rd)),by=list(Q_est_source,bw_source)]
results[,as.list(quantile(rd)),by=list(Q_est_source,bw_source)]
avgresults=avgresults[order(mean)]
avgresults[,lower:=mean-1.96*sd/sqrt(num_iter)]
avgresults[,upper:=mean+1.96*sd/sqrt(num_iter)]
# avgresults[,method:=factor(method,levels=avgresults$method)]
Q_est_sources=c("Q_0", "SplitSequential",
"Nested", "FullSequential")
nice_Q_est=c("True E[Y|W]","Split Sequential","Nested","Full Sequential")
avgresults$Q_est_source=factor(avgresults$Q_est_source,levels=Q_est_sources,labels=nice_Q_est)
bw_sources=c("cv", "cv_validation",
"full_cv", "oracle")
nice_bw=c("CV Bandwidth\nValidation Set Predictions","CV Bandwidth (Validation Sets)\nValidation Set Predictions","CV Bandwidth\nRefit to Full Data","Oracle Bandwidth\nValidation Set Predictions")
avgresults$bw_source=factor(avgresults$bw_source,levels=bw_sources,labels=nice_bw)
# avgresults=avgresults[bw_source!="drop"]
ggplot(avgresults,aes(y=factor(bw_source),x=mean,xmin=lower,xmax=upper))+
geom_point()+geom_errorbarh()+facet_wrap(~Q_est_source,ncol=1)+
theme_bw()+xlab("Risk Difference")+ylab("Method")
str(results)
ggplot(results,aes(x=bw,color=bw_source))+geom_density()+facet_wrap(~Q_est_source)
ggplot(results,aes(x=bw,color=bw_source))+geom_density()+facet_grid(bw_source~Q_est_source)
setwd("~/Dropbox/thesis/simulations/sl_nesting_sim/")
library(data.table)
library(ggplot2)
files=dir("basic_nesting_results_1000/",full.names = T)
allresults=lapply(files,function(file){load(file);results})
results=rbindlist(allresults)
# results=results[iteration>1000,]
num_iter=length(unique(results$iteration))
results
avgresults=results[,list(mean=mean(rd),sd=sd(rd)),by=list(Q_est_source,bw_source)]
results[,as.list(quantile(rd)),by=list(Q_est_source,bw_source)]
avgresults=avgresults[order(mean)]
avgresults[,lower:=mean-1.96*sd/sqrt(num_iter)]
avgresults[,upper:=mean+1.96*sd/sqrt(num_iter)]
# avgresults[,method:=factor(method,levels=avgresults$method)]
#compare CV selections
ggplot(results,aes(x=bw,color=bw_source))+geom_density()+facet_grid(bw_source~Q_est_source)
#consider undersmoothing
# http://ageconsearch.umn.edu/bitstream/116236/2/sjart_st0064.pdf
str(results)
Q_est_sources=c("Q_0", "SplitSequential",
"Nested", "FullSequential")
nice_Q_est=c("True E[Y|W]","Split Sequential","Nested","Full Sequential")
avgresults$Q_est_source=factor(avgresults$Q_est_source,levels=Q_est_sources,labels=nice_Q_est)
bw_sources=c("cv", "cv_validation",
"full_cv", "oracle")
nice_bw=c("CV Bandwidth\nValidation Set Predictions","CV Bandwidth (Validation Sets)\nValidation Set Predictions","CV Bandwidth\nRefit to Full Data","Oracle Bandwidth\nValidation Set Predictions")
avgresults$bw_source=factor(avgresults$bw_source,levels=bw_sources,labels=nice_bw)
# avgresults=avgresults[bw_source!="drop"]
ggplot(avgresults,aes(y=factor(bw_source),x=mean,xmin=lower,xmax=upper))+
geom_point()+geom_errorbarh()+facet_wrap(~Q_est_source,ncol=1)+
theme_bw()+xlab("Risk Difference")+ylab("Method")
440000/100/60
library(devtools)
?use_data
setwd("~/Dropbox/opttx/")
gen_data(1000)
gendata(1000)
x=gendata(1000)
opt_tx_data=gendata(1000)
use_data(opt_txt_data)
use_data(opt_tx_data)
opt_tx_data
library(opttx)
Qbar0 <- function(A, W) {
W1 <- W[, 1]
W2 <- W[, 2]
W3 <- W[, 3]
W4 <- W[, 4]
Qbar <- ifelse(W4 > 0, plogis(1 - W1^2 + 3 * W2 + A * (5 * W3^2 - 4.45)), plogis(-0.5 - W3 + 2 * W1 * W2 + A * (3 *
abs(W2) - 1.5)))
return(Qbar)
}
g0 <- function(W) {
W1 <- W[, 1]
W2 <- W[, 2]
W3 <- W[, 3]
W4 <- W[, 4]
# rep(0.5, nrow(W))
plogis(0.25 * W1 - 0.1 * W2)
}
gen_data <- function(n = 1000, p = 4) {
W <- matrix(rnorm(n * p), nrow = n)
colnames(W) <- paste("W", seq_len(p), sep = "")
A <- rbinom(n, 1, g0(W))
u <- runif(n)
Y <- as.numeric(u < Qbar0(A, W))
Y0 <- as.numeric(u < Qbar0(0, W))
Y1 <- as.numeric(u < Qbar0(1, W))
d0 <- as.numeric(Qbar0(1, W) > Qbar0(0, W))
Yd0 <- as.numeric(u < Qbar0(d0, W))
data.frame(W, A, Y, Y0, Y1, Yd0, d0, blip = Qbar0(1, W) - Qbar0(0, W))
}
testdata=gen_data(1000,6)
testdata=gen_data(1e6,6)
Qbar0(testdata$A,testdata[,c("W1","W2","W3","W4","W5","W6")])
z=Qbar0(testdata$A,testdata[,c("W1","W2","W3","W4","W5","W6")])
z
blip=Qbar0(1,testdata[,c("W1","W2","W3","W4","W5","W6")])-Qbar0(0,testdata[,c("W1","W2","W3","W4","W5","W6")])
blip
blip_prime=Qbar0(1,testdata[,c("W1","W2","W3","W4","W5","W6")])-Qbar0(0,testdata[,c("W1","W2","W3","W4","W5","W6")])
install.packages("mxnet")
rm(list=ls())
34/24
36/26
